<?php


namespace App\Traits;


use App\Packages\ControlDB\Models\Group;
use App\Packages\ControlDB\Models\GroupTag;
use App\Packages\ControlDB\Models\Position;
use App\Packages\ControlDB\Models\Student;
use App\Packages\ControlDB\Models\StudentTag;
use App\User;
use Illuminate\Support\Collection;

/*
 * You may pass anything you want to $user (i.e. \App\User or \App\Packages\ControlDB\Models\Student
 *
 * Define a role() method which will accept the $user variable and return the corresponding
 * data. The default requires \App\User
 */
trait AuthorizesUsers
{

    /*
    |--------------------------------------------------------------------------
    | Tags
    |--------------------------------------------------------------------------
    |
    | Methods for checking if tags are applied to entities
    |
    */


    /**
     * Check if a group has a tag
     *
     * @param mixed $role
     * @param string $category
     * @param string $tag
     *
     * @return boolean
     */
    public function groupHasTag($role, $category, $tag)
    {
        return $this->getTagFromGroup($this->role($role)->group, $category, $tag) !== null;
    }

    /**
     * Check if a student has a tag
     *
     * @param mixed $role
     * @param string $category
     * @param string $tag
     * @param array|null $data Data to apply when searching for a tag
     *
     * @return boolean
     */
    public function studentHasTag($role, $category, $tag, $data = null)
    {
        return $this->getTagFromStudent($this->role($role)->student, $category, $tag, $data) !== null;
    }



    /**
     * Get a tag from a group
     *
     * @param Group $group
     * @param string $categoryReference
     * @param string $tagReference
     *
     * @return GroupTag|null
     */
    public function getTagFromGroup($group, $categoryReference, $tagReference)
    {
        $groupTags = GroupTag::allThrough($group);
        if($groupTags === false) {
            return null;
        }
        $groupTags = $groupTags->filter(function ($groupTag) use ($categoryReference, $tagReference) {
            return $groupTag->reference === $tagReference && $groupTag->category->reference === $categoryReference;
        });

        return $groupTags->first();
    }

    /**
     * Get a tag from a student
     *
     * @param Student $user
     * @param string $categoryReference
     * @param string $tagReference
     *
     * @return StudentTag|null
     */
    public function getTagFromStudent($user, $categoryReference, $tagReference, $data)
    {
        $studentTags = StudentTag::allThrough($user);
        if($studentTags === false) {
            return null;
        }
        $studentTags = $studentTags->filter(function ($studentTag) use ($categoryReference, $tagReference, $data) {
            return $studentTag->reference === $tagReference &&
                $studentTag->category->reference === $categoryReference &&
                $studentTag->pivot->data === $data;
        });
        return $studentTags->first();
    }


    /*
    |--------------------------------------------------------------------------
    | Positions
    |--------------------------------------------------------------------------
    |
    | Methods for determining if students have positions
    |
    */

    /**
     * Check if a student has a presidential position
     *
     * @param mixed $user
     *
     * @return boolean
     */
    public function studentHasPresidentialPosition($role)
    {
        return in_array($this->role($role)->position->id, config('portal.position_grouping.presidents'));
    }

    /**
     * Check if a student has a treasurer position
     *
     * @param mixed $user
     *
     * @return boolean
     */
    public function studentHasTreasurerPosition($role)
    {
        return in_array($this->role($role)->position->id, config('portal.position_grouping.treasurers'));
    }

    /**
     * Check if the user is new committee
     *
     * @param mixed $user
     *
     * @return bool
     */
    public function studentIsNewCommittee($role)
    {
        return $this->role($role)->committee_year === getReaffiliationYear();
    }

    /**
     * Check if the user is new committee
     *
     * @param mixed $user
     *
     * @return bool
     */
    public function studentIsOldCommittee($role)
    {
        return !$this->studentIsNewCommittee($role);
    }


    /*
    |--------------------------------------------------------------------------
    | Functions to be overriden if not using \App\User
    |--------------------------------------------------------------------------
    */

    /**
     * Get the committee role of the student
     *
     * @param $user
     *
     * @return mixed
     */
    public function role($role)
    {
        return $role->getCurrentRole();
    }


}
