<?php
/**
 * Created by PhpStorm.
 * User: toby
 * Date: 10/03/19
 * Time: 12:15
 */

namespace App\Packages\FileUpload;


use App\Http\Controllers\Controller;
use App\Packages\ControlDB\Models\Group;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Storage;
use Illuminate\Validation\Rule;
// TODO tidy
/**
 * This file requires the following permissions to be defined, with the format modulename.permission
 * - Upload - can they upload a file?
 * - View - can view file?
 * - Download - can they download the files?
 * - post-note - can they post a note?
 * - change-status - Can they change the status of a file?
 * - delete-note-template
 * - update-note-template
 * - create-note-template
 * - view-note-template
 *
 * Class FileUploadController
 * @package App\Packages\FileUpload
 */
abstract class FileUploadController extends Controller
{


    protected $fileModel;

    protected $noteModel;

    /**
     * @var string
     */
    protected $templateModel;

    public function __construct()
    {
        $this->fileModel = $this->fileModel();
        $this->noteModel = $this->noteModel();
        $this->templateModel = $this->templateModel();
    }

    abstract protected function fileModel(): string;

    /**
     * @return string
     */
    abstract protected function noteModel(): string;

    abstract protected function templateModel(): string;

    protected function authorizeModuleAction($ability)
    {
        $this->authorize($this->getModuleName().'.'.$ability);
    }

    public function uploadFile(Request $request)
    {

        $this->authorizeModuleAction('upload');

        $request->validate([
            'file' => 'required|mimes:bin,pdf,doc,dotm,dotx,zip,docx,pptx,ppt,odt,txt,xlsx,xls,csv,ods,otp',
            'title' => 'required|min:3|max:255'
        ]);

        $file = $request->file('file');
        $filename = $file->getClientOriginalName();

        if ($path = Storage::cloud()->put($this->getModuleName().'-file-uploads', $request->file('file'))) {

            $fileModel = new $this->fileModel;
            $fileModel->fill([
                'filename' => $filename,
                'mime' => $file->getClientMimeType(),
                'path' => $path,
                'size' => $file->getSize(),
                'year' => getReaffiliationYear(),
                'title' => $request->get('title'),
                'status' => 'awaiting approval'
            ]);

            $fileModel->user_id = Auth::user()->id;
            $fileModel->group_id = getGroupID();
            $fileModel->position_id = (Auth::user()->getCurrentRole()->position->id !== 'admin' ? Auth::user()->getCurrentRole()->position->id : null);
            if ($fileModel->save()) {
                return $this->getFileWithRelations($fileModel->id);
            }

        }
        return response()->json([
            'success' => false
        ], 500);
    }

    /**
     * @param null $id
     * @return mixed
     */
    private function getFileWithRelations($id = null)
    {
        $with = [
            'user:id,forename,surname,email',
            'notes',
            'notes.user:id,forename,surname,email',
        ];
        if ($id === null) {
            $files = $this->fileModel::with($with)->get();
            return $files->map(function($file) {
                $file->group = Group::find($file->group_id)->toArray();
                return $file;
            });
        } else {

            $file = $this->fileModel::with($with)->findOrFail($id);
            $file->group = Group::find($file->group_id)->toArray();
            return $file;
        }
    }

    public function retrieveFile()
    {
        $this->authorizeModuleAction('view');

        $files = $this->getFileWithRelations();
        $files = $files->filter(function($file) {
            return $file->group_id === getGroupID();
        });
        return $files->values();
    }

    public function downloadFile($id)
    {
        $this->authorizeModuleAction('download');

        $file = $this->fileModel::findOrFail($id);
        abort_if(getGroupID() !== $file->group_id, 403, 'Please log in as a member of this society.');
        return Storage::cloud()->download($file->path, $file->getSafeFileName());
    }

    public function downloadAll($year)
    {
        $files = $this->fileModel::where([
            'year' => $year,
            'status' => 'approved'
        ])->get();

        $zipFile = new \PhpZip\ZipFile();

        $files->each(function($file) use (&$zipFile) {
            $zipFile->addFile(Storage::cloud()->get($file->path));
        });

        $filename = 'approved-'.$this->getModuleName().'-'.$year.'/'.substr($year + 1, 2, 2);
        $zipFile->outputAsAttachment($filename);

        $zipFile->close();
    }

    public function postNote(Request $request, $id)
    {
        $this->authorizeModuleAction('post-note');
        // Validate
        $request->validate([
            'note' => 'required|min:3|max:10000'
        ]);

        // Save
        $note = new $this->noteModel;
        $note->note = $request->get('note');
        $note->user_id = Auth::user()->id;
        $note->group_id = getGroupID();
        $note->position_id = (Auth::user()->getCurrentRole()->position->id === 'admin' ? null : Auth::user()->getCurrentRole()->position->id);
        $note->file_id = $id;

        // Return
        if ($note->save()) {
            return $this->getFileWithRelations($id);
        }
        return response(['note' => 'Could not save the note'], 500);
    }

    public function adminRetrieveFile(Request $request)
    {
        $this->authorizeModuleAction('view-admin');
        return $this->getFileWithRelations();
    }

    public function adminDownloadFile(Request $request, $id)
    {
        $this->authorizeModuleAction('download-admin');
        $file = $this->fileModel::findOrFail($id);
        return Storage::cloud()->download($file->path, $file->getSafeFileName());
    }

    public function adminPostNote(Request $request, $id)
    {
        $this->authorizeModuleAction('post-note-admin');

        // Validate
        $request->validate([
            'note' => 'required|min:3|max:10000'
        ]);

        // Save
        $note = new $this->noteModel;
        $note->note = $request->get('note');
        $note->user_id = Auth::user()->id;
        $note->group_id = null;
        $note->position_id = null;
        $note->file_id = $id;

        // Return
        if ($note->save()) {
            return $this->getFileWithRelations($id);
        }
        return response(['note' => 'Could not save the note'], 500);
    }

    public function adminChangeFileStatus(Request $request, $id)
    {
        $this->authorizeModuleAction('change-status');

        $request->validate([
            'status' => [
                'required',
                Rule::in([
                    'awaiting approval',
                    'approved',
                    'rejected'
                ])
            ]
        ]);

        $status = $request->get('status');

        $file = $this->fileModel::find($id);

        if ($file->status !== $status) {
            $file->status = $status;
            if ($file->save()) {
                Event::dispatch($this->getModuleName().'.fileStatusChanged', ['file' => $this->getFileWithRelations($file->id)]);
            }
        }

        return $file->status;
    }

    abstract protected function getModuleName(): string;

    public function adminGetNoteTemplates()
    {
        $this->authorizeModuleAction('view-note-templates');

        return $this->templateModel::all();
    }

    public function adminCreateNoteTemplate(Request $request)
    {
        $this->authorizeModuleAction('create-note-template');
        $request->validate([
            'name' => 'required|min:3|max:255',
            'description' => 'required|min:3|max:255',
            'template' => 'required|min:10|max:65000'
        ]);

        $template = $this->templateModel::create($request->only([
            'name',
            'description',
            'template'
        ]));

        if ($template->exists) {
            return $template;
        }

        return response('Template could not be saved', 500);

    }

    public function adminUpdateNoteTemplate(Request $request, $id)
    {
        $this->authorizeModuleAction('update-note-template');
        $request->validate([
            'name' => 'sometimes|min:3|max:255',
            'description' => 'sometimes|min:3|max:255',
            'template' => 'sometimes|min:10|max:65000'
        ]);

        $template = $this->templateModel::findOrFail($id);

        if ($template->update($request->only([
            'name',
            'description',
            'template'
        ]))) {
            return $template;
        }

        return response('Template could not be saved', 500);
    }

    public function adminDeleteNoteTemplate($id)
    {
        $this->authorizeModuleAction('delete-note-template');
        if ($this->templateModel::destroy($id)) {
            return response('', 200);
        }
        return response('Could not delete the template', 500);
    }
}
