<?php

namespace App\Modules\CommitteeDetails\Rules;

use App\Modules\CommitteeDetails\Entities\PositionSetting;
use App\Modules\CommitteeDetails\Traits\ValidatesCommitteeRole;
use App\Packages\ControlDB\Models\CommitteeRole;
use App\Packages\ControlDB\Models\Group;
use App\Packages\ControlDB\Models\Position;
use App\Packages\ControlDB\Models\Student;
use Illuminate\Contracts\Validation\Rule;

class PositionMustBeEmpty extends HandlesCommitteeRoleFormBaseRule
{

    /**
     * Determine if the validation rule passes
     *
     * @param string $attribute
     * @param mixed $value
     * @return bool
     * @throws \Exception
     */
    public function passes($attribute, $value)
    {
        // Check if the position is available
        return (!$this->positionMustOnlyHaveOneCommitteeMember()
            || !$this->positionOwned());
    }

    /**
     * Get the validation error message.
     *
     * @return string
     */
    public function message()
    {
        return 'The position is taken.';
    }

    /**
     * Check settings to see if the position must only have
     * a single committee member
     *
     * @return bool
     *
     * @throws \Exception
     */
    public function positionMustOnlyHaveOneCommitteeMember()
    {
        return $this->checkInPositionSettings($this->position->id, $this->positionSetting->position_only_has_single_committee_member);
    }

    /**
     * Check if the position is already owned
     *
     * @return bool
     *
     * @throws \Exception
     */
    public function positionOwned()
    {
        // Get the group committee roles involving the current position
        $currentPositionId = $this->position->id;
        $committeeRoles = CommitteeRole::allThrough($this->group)
            ->filter(function ($committeeRole) use ($currentPositionId) {
                return $committeeRole->position_id === $currentPositionId
                    && $committeeRole->committee_year === config('portal.reaffiliation_year')
                    && $committeeRole->id !== $this->ignoredCommitteeRoleID;
            });

        return $committeeRoles->count() > 0;
    }
}

